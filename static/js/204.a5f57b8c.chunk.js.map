{"version":3,"file":"static/js/204.a5f57b8c.chunk.js","mappings":"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","sources":["webpack://slim-mom-app/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","webpack://slim-mom-app/./src/components/TextField/TextField.module.css?b6c9","components/TextField/TextField.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AuthForm_container__VCAm2\",\"form\":\"AuthForm_form__N+Fyz\",\"header\":\"AuthForm_header__ppfR-\",\"message\":\"AuthForm_message__Le5UP\",\"actionButtons\":\"AuthForm_actionButtons__fPM+K\",\"invalid\":\"AuthForm_invalid__EQpZU\",\"valid\":\"AuthForm_valid__J9A8q\"};","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {logIn, register} from '../../redux/auth/authOperations';\nimport {useAuth} from '../../hooks/useAuth';\nimport css from './AuthForm.module.css';\nimport {NavLink} from 'react-router-dom';\nimport {TextField} from \"../TextField/TextField\";\n\nexport const AuthForm = ({\n                             header,\n                             fields,\n                             buttonText,\n                             footerText,\n                             footerLink,\n                             isLogin,\n                         }) => {\n    const {isRefreshing} = useAuth();\n    const [formData, setFormData] = useState({});\n    // const [showPassword, setShowPassword] = useState(false);\n    const [message, setMessage] = useState(null);\n    const dispatch = useDispatch();\n    const [isValid, setIsValid] = useState(null);\n\n    // Handle Password Validation\n    const validatePassword = (e, field) => {\n        setMessage('');\n\n        if (field === 'password' && !isLogin) {\n            const valid = e.target.value.length >= 8;\n            setIsValid(e.target.value.length === 0 ? null : valid);\n            setMessage(valid ? 'Password is secure.' : 'Password must be at least 8 characters long.');\n        }\n    };\n\n    const handleChange = (e, field) => {\n        setFormData({\n            ...formData,\n            [field]: e.target.value,\n        });\n        validatePassword(e, field);\n    };\n\n    // Handle Submit\n    const handleSubmit = async e => {\n        e.preventDefault();\n\n        try {\n            if (isLogin) {\n                await dispatch(logIn(formData)).unwrap();\n            } else {\n                await dispatch(register(formData)).unwrap();\n            }\n        } catch (err) {\n            setIsValid(false);\n\n            if (err.status === 409) {\n                setMessage('Account already exists.');\n            } else if (err.status === 403) {\n                setMessage('Invalid email or password.');\n            } else {\n                setMessage(`${err.message || 'An error has occurred.'}`);\n            }\n            clearPasswordField();\n        }\n    };\n\n    const clearPasswordField = () => {\n        setFormData(prevData => ({\n            ...prevData,\n            password: '',\n        }));\n    };\n\n    return (\n        <div className={css.container}>\n            <h1 className={css.header}>\n                {header}\n            </h1>\n            <form onSubmit={handleSubmit} className={css.form}>\n                {fields.map((field, index) => (\n                    <div key={index} style={{position: 'relative'}}>\n                        <TextField\n                            type={field.type}\n                            className={field.type === 'password' && isValid !== null ? (isValid ? css.valid : css.invalid) : ''}\n                            label={field.placeholder}\n                            value={formData[field.name] || ''}\n                            onChange={e => handleChange(e, field.name)}\n                            id={field.name}\n                            required\n                        />\n                        {field.type === 'password' ?\n                            (<>\n                                <p className={css.message}\n                                    style={{color: isValid ? 'var(--mint-green)' : 'var(--red)'}}\n                                >\n                                    {' '}\n                                    {message}\n                                </p>\n                            </>) : null\n                        }\n                    </div>\n                ))}\n\n\n                <div className={css.actionButtons}>\n                    <button\n                        type=\"submit\"\n                        className=\"button\"\n                        style={{width: isRefreshing ? '170px' : null}}\n                    >\n                        {isRefreshing ?\n                            (isLogin ? 'Signing in...' : 'Signing up...') : buttonText}\n                    </button>\n\n                    <button className=\"button\">\n                        <NavLink to={footerLink} style={{textDecoration: \"none\", color: \"inherit\"}}>\n                            {footerText}\n                        </NavLink>\n                    </button>\n\n                </div>\n            </form>\n        </div>\n    );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"TextField_inputContainer__ubnUk\",\"highlight\":\"TextField_highlight__Ii8kk\",\"textField\":\"TextField_textField__Ijesv\",\"label\":\"TextField_label__vkJH3\"};","import css from './TextField.module.css';\nimport clsx from 'clsx';\n\nexport const TextField = ({label, id, className, type, onChange, value}) => {\n    return (\n        <div className={clsx(css.inputContainer, className)}>\n            <input onChange={onChange} value={value} type={type} className={css.textField} id={id} placeholder=\" \" required/>\n            <label className={css.label} htmlFor={id}>{label}</label>\n            {label && <span className={css.highlight}></span>}\n        </div>\n    )\n};\n","import {AuthForm} from '../AuthForm/AuthForm';\n\nexport const LoginForm = () => {\n\n    const fields = [\n        {name: 'email', type: 'email', placeholder: 'Email *'},\n        {name: 'password', type: 'password', placeholder: 'Password *'},\n    ];\n\n\n    return (\n        <AuthForm\n            header=\"Log in\"\n            fields={fields}\n            buttonText=\"Log in\"\n            footerText=\"Register\"\n            footerLink=\"/register\"\n            footerLinkText=\"Sign Up\"\n            isLogin={true}\n        />\n    );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { LoginForm } from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </HelmetProvider>\n  );\n};\n\nexport default LoginPage;\n"],"names":["AuthForm","_ref","header","fields","buttonText","footerText","footerLink","isLogin","isRefreshing","useAuth","formData","setFormData","useState","message","setMessage","dispatch","useDispatch","isValid","setIsValid","handleChange","e","field","target","value","validatePassword","valid","length","clearPasswordField","prevData","password","_jsxs","className","css","children","_jsx","onSubmit","async","preventDefault","logIn","unwrap","register","err","status","map","index","style","position","TextField","type","label","placeholder","name","onChange","id","required","_Fragment","color","width","NavLink","to","textDecoration","clsx","htmlFor","LoginForm","footerLinkText","LoginPage","HelmetProvider","Helmet"],"sourceRoot":""}