{"version":3,"file":"static/js/131.75016d45.chunk.js","mappings":"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","sources":["webpack://slim-mom-app/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","webpack://slim-mom-app/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__N+Fyz\",\"message\":\"AuthForm_message__Le5UP\",\"actionButtons\":\"AuthForm_actionButtons__fPM+K\",\"invalid\":\"AuthForm_invalid__EQpZU\",\"valid\":\"AuthForm_valid__J9A8q\"};","import React, { useState } from 'react';\nimport iconSvg from '../../assets/images/icons.svg';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { logIn, register } from '../../redux/auth/authOperations';\nimport { useAuth } from '../../hooks/useAuth';\nimport css from './AuthForm.module.css';\nimport { Link } from 'react-router-dom';\n\nexport const AuthForm = ({\n                           fields,\n                           buttonText,\n                           footerText,\n                           footerLink,\n                           footerLinkText,\n                           isLogin,\n                         }) => {\n  const { isRefreshing } = useAuth();\n  const [formData, setFormData] = useState({});\n  const [showPassword, setShowPassword] = useState(false);\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const [isValid, setIsValid] = useState(null);\n\n  // Handle Password Validation\n  const validatePassword = (e, field) => {\n    setMessage('');\n\n    if (field === 'password' && !isLogin) {\n      const valid = e.target.value.length >= 8;\n      setIsValid(e.target.value.length === 0 ? null : valid);\n      setMessage(valid ? 'Password is secure.' : 'Password must be at least 8 characters long.');\n    }\n  };\n\n  const handleChange = (e, field) => {\n    setFormData({\n      ...formData,\n      [field]: e.target.value,\n    });\n    validatePassword(e, field);\n  };\n\n  // Handle Submit\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      if (isLogin) {\n        await dispatch(logIn(formData)).unwrap();\n      } else {\n        await dispatch(register(formData)).unwrap();\n      }\n    } catch (err) {\n      setIsValid(false);\n\n      if (err.status === 409) {\n        setMessage('Account already exists.');\n      } else if (err.status === 403) {\n        setMessage('Invalid email or password.');\n      } else {\n        setMessage(`${err.message || 'An error has occurred.'}`);\n      }\n      clearPasswordField();\n    }\n  };\n\n  const clearPasswordField = () => {\n    setFormData(prevData => ({\n      ...prevData,\n      password: '',\n    }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      {fields.map((field, index) => (\n        <div key={index} style={{ position: 'relative' }}>\n          <input\n            type={\n              field.type === 'password' && showPassword\n                ? 'text'\n                : field.type\n            }\n            className={field.type === 'password' && isValid !== null ? (isValid  ? css.valid : css.invalid) : ''}\n            placeholder={field.placeholder}\n            value={formData[field.name] || ''}\n            onChange={e => handleChange(e, field.name)}\n            id={field.name}\n            required\n          />\n          {field.type === 'password' ?\n            (<>\n              {isLogin ?\n                <svg width=\"20\" height=\"20\" onClick={() => setShowPassword(val => !val)}>\n                  <use href={`${iconSvg}#eye${showPassword ? '' : '-off'}`} />\n                </svg> :\n                    isValid !==null &&\n                <svg width=\"20\" height=\"20\" onClick={() => {\n                  if (!isValid) {\n                    clearPasswordField();\n                    setIsValid(null);\n                    setMessage('');\n                  }\n                }}>\n                  <use href={`${iconSvg}#${isValid ? 'valid' : 'invalid'}-icon`} />\n                </svg>\n                }\n\n                <p className={css.message}\n                  style={{ color: isValid ? 'var(--mint-green)' : 'var(--red)' }}\n                >\n                  {' '}\n                  {message}\n                </p>\n            </>) : null\n          }\n        </div>\n      ))}\n\n\n      <div className={css.actionButtons} style={!isLogin ? { marginTop: '71px' } : null}>\n        <button\n          type=\"submit\"\n          className=\"primary-button\"\n          style={{ width: isRefreshing ? '170px' : null }}\n        >\n          {isRefreshing ?\n            (isLogin ? 'Signing in...' : 'Signing up...') : buttonText}\n        </button>\n\n        <p>\n          {footerText}{' '}\n          <Link to={footerLink}>{footerLinkText}</Link>\n        </p>\n      </div>\n    </form>\n  );\n};\n\nAuthForm.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      placeholder: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  buttonText: PropTypes.string.isRequired,\n  footerText: PropTypes.string.isRequired,\n  footerLink: PropTypes.string.isRequired,\n  footerLinkText: PropTypes.string.isRequired,\n  isLogin: PropTypes.bool.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginForm_container__YDFcb\"};","import css from './LoginForm.module.css';\nimport { AuthForm } from '../AuthForm/AuthForm';\n\nexport const LoginForm = () => {\n\n  const fields = [\n    { name: 'email', type: 'email', placeholder: 'Email' },\n    { name: 'password', type: 'password', placeholder: 'Password' },\n  ];\n\n\n  return (\n    <div className={css.container}>\n      <h1>\n        Log In\n      </h1>\n      <p>\n        Welcome back to effortless expense tracking! Your financial dashboard awaits..\n      </p>\n\n      <AuthForm\n        fields={fields}\n        buttonText=\"Sign In\"\n        footerText=\"Don't have an account?\"\n        footerLink=\"/signup\"\n        footerLinkText=\"Sign Up\"\n        isLogin={true}\n      />\n\n    </div>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { LoginForm } from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </HelmetProvider>\n  );\n};\n\nexport default LoginPage;\n"],"names":["AuthForm","_ref","fields","buttonText","footerText","footerLink","footerLinkText","isLogin","isRefreshing","useAuth","formData","setFormData","useState","showPassword","setShowPassword","message","setMessage","dispatch","useDispatch","isValid","setIsValid","handleChange","e","field","target","value","validatePassword","valid","length","clearPasswordField","prevData","password","_jsxs","onSubmit","async","preventDefault","logIn","unwrap","register","err","status","className","css","children","map","index","style","position","_jsx","type","placeholder","name","onChange","id","required","_Fragment","width","height","onClick","val","href","iconSvg","color","marginTop","Link","to","LoginForm","LoginPage","HelmetProvider","Helmet"],"sourceRoot":""}